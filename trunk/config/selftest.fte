# -----------------------------------------------------------------------
# eFTE self test script
# This file has been automatically generated by the eFTE packaging tools.
# Manual changes to this file will very likely be lost, and may have an
# adverse effect on eFTE self testing capabilities.
# Copyright (c) 2008 eFTE Group
# -----------------------------------------------------------------------

sub dot33 {                    # ( n -- ) print as nnn:nnn
   lesshash                    
   bl hold
   3:hash
   push 58 hold
   3:hash
   hashmoretype
}

sub dot9r { 9 dotr }      # ( n -- ) space padded right aligned 9 chars signed number out

sub pass   {
   tor dup2 equals if          "PASS" type$
   else                        "FAIL" type$
   endif 
   rfrom 
   " test " type$ dot33
   "wants"  type$  dot9r
   ", got"  type$  dot9r
   cr
}

sub accumulate { 10 mul plus }

# components/alwayspass
sub test_1_1 { 222 222 push 1001 pass } # just two passing tests to test test and test that pass will pass
sub test_1_2 { 222 dup push 1002 pass }
sub test_1_3 { test_1_1 test_1_2 }


# components/between
sub test_2_1 { 10 8 12 between true push 2001 pass }
sub test_2_2 { 8 8 12 between true push 2002 pass }
sub test_2_3 { 12 8 12 between true push 2003 pass }
 
sub test_2_4 { 5 8 12 between false push 2004 pass }
sub test_2_5 { 15 8 12 between false push 2005 pass }
 
sub test_2_6 { -5 -10 0 between true push 2006 pass }
sub test_2_7 { -15 -10 0 between false push 2007 pass }
sub test_2_8 { 10 -20 -10 between false push 2008 pass }
 
sub test_2_9 { test_2_1 test_2_2 test_2_3 test_2_4 test_2_5 test_2_6 test_2_7 test_2_8 }


# components/bits
sub test_3_1 { 2 invert -3 push 3001 pass } # test invert
sub test_3_2 { -5 invert 4 push 3002 pass }
 
sub test_3_3 { 0 not true push 3003 pass } # test not
sub test_3_4 { 1234 not false push 3004 pass }
sub test_3_5 { -321 not false push 3005 pass }
sub test_3_6 { true not false push 3006 pass }
sub test_3_7 { false not true push 3007 pass }
 
sub test_3_8 { test_3_1 test_3_2 test_3_3 test_3_4 test_3_5 test_3_6 test_3_7 }


# components/constants
 # tests:
 # minus, plus,
 # primitives defined constants
 
sub test_4_1 { 20 15 minus 5 push 4001 pass }
sub test_4_2 { 20 15 plus 35 push 4002 pass }
sub test_4_3 { 0 false or 1 plus true plus 0 push 4003 pass }
sub test_4_4 { 0 false plus 1 minus true mul 1 push 4004 pass }
sub test_4_5 { test_4_1 test_4_2 test_4_3 test_4_4 }


# components/doloop
sub test_5_1 { 0 101 0 do i plus loop 5050 push 5001 pass }
sub test_5_2 { 0 200 100 do i plus i 150 equals if leave endif inc loop lshift 12850 push 5002 pass }
sub test_5_3 { test_5_1 test_5_2 }


# components/exit
sub test_6_1 { 333 exit lshift } # tests exit
sub test_6_2 { test_6_1 inc 334 push 6002 pass }


# components/iftelsethen
sub test_7_1 { 5 inc true if lshift inc else drop 0 endif lshift 26 push 7001 pass }
sub test_7_2 { 3 inc false if drop 0 else inc lshift endif inc 11 push 7002 pass }
sub test_7_3 { test_7_1 test_7_2 }


# components/incdecnegate
sub test_8_1 { 30 inc inc inc 33 push 8001 pass }
sub test_8_2 { -2 inc inc inc inc inc 3 push 8002 pass }
sub test_8_3 { 20 dec dec 18 push 8003 pass }
sub test_8_4 { 1 dec dec dec dec -3 push 8004 pass }
sub test_8_5 { 12 negate -12 push 8005 pass }
sub test_8_6 { -15 negate 15 push 8006 pass }
sub test_8_7 { -8 abs 8 push 8007 pass }
sub test_8_8 { 5 abs 5 push 8008 pass }
sub test_8_9 { test_8_1 test_8_2 test_8_3 test_8_4 test_8_5 test_8_6 test_8_7 test_8_8 }
 


# components/lshift
sub test_9_1 { 4 lshift 8 push 9001 pass } # test lshift
sub test_9_2 { -4 lshift -8 push 9002 pass }
sub test_9_3 { test_9_1 test_9_2 }


# components/memory
sub test_10_1 { here 5 allot here minus -5 push 10001 pass }
sub test_10_2 { here dup dup 100 plus store here swap push 10002 pass }
sub test_10_3 { here dup 6 1 do i over store inc loop drop
 6 1 do 1 allot loop
 0 6 1 do tor count rfrom plus loop nip
 15 push 10003 pass }
 
 
sub test_10_4 { test_10_1 test_10_2 test_10_3 }


# components/minmax
sub test_11_1 { 2 5 min 2 push 11001 pass }
sub test_11_2 { 2 5 max 5 push 11002 pass }
sub test_11_3 { -3 -7 min -7 push 11003 pass }
sub test_11_4 { -3 -7 max -3 push 11004 pass }
 
sub test_11_5 { -2 5 min -2 push 11005 pass }
sub test_11_6 { -2 5 max 5 push 11006 pass }
sub test_11_7 { 3 -7 min -7 push 11007 pass }
sub test_11_8 { 3 -7 max 3 push 11008 pass }
 
sub test_11_9 { test_11_1 test_11_2 test_11_3 test_11_4 test_11_5 test_11_6 test_11_7 test_11_8 }


# components/mod
sub test_12_1 { 20 5 mod 0 push 12001 pass }
sub test_12_2 { 15 4 mod 3 push 12002 pass }
sub test_12_3 { -18 4 mod -2 push 12003 pass }
sub test_12_4 { -24 -7 mod -3 push 12004 pass }
sub test_12_5 { test_12_1 test_12_2 test_12_3 test_12_4 }
 


# components/niptuckpluck
sub test_13_1 { 4 6 8 drop accumulate 64 push 13001 pass } # test drop
sub test_13_2 { 3 6 swap accumulate 36 push 13002 pass } # test swap
sub test_13_3 { 2 5 over 2:accumulate 252 push 13003 pass } # test over
sub test_13_4 { 1 2 3 nip accumulate 31 push 13004 pass } # test nip
sub test_13_5 { 4 5 6 minrot 2:accumulate 546 push 13005 pass } # test minrot
sub test_13_6 { 7 8 9 tuck 3:accumulate 9897 push 13006 pass } # test tuck
sub test_13_7 { 2 4 6 pluck 3:accumulate 2642 push 13007 pass } # test pluck
sub test_13_8 { test_13_1 test_13_2 test_13_3 test_13_4 test_13_5 test_13_6 test_13_7 }


# components/plus
sub test_14_1 { 3 5 plus 8 push 14001 pass }
sub test_14_2 { -2 9 plus 7 push 14002 pass }
sub test_14_3 { 6 -8 plus -2 push 14003 pass }
sub test_14_4 { -11 -7 plus -18 push 14004 pass }
 
sub test_14_5 { 777 # stack "marker"
 test_14_1 # run tests
 test_14_2
 test_14_3
 test_14_4
 777 push 14005 pass } #is stack balanced?


# components/qdup
sub test_15_1 { 2 0 qdup swap qdup 10 mul plus 10 mul plus 220 push 15001 pass } # tests qdup


# components/rfromtor
sub test_16_1 { 5 7 9 tor swap rfrom 2:accumulate 957 push 16001 pass }
sub test_16_2 { 2 3 tor 5 rfetch swap rfrom 3:accumulate 3532 push 16002 pass }
sub test_16_3 { test_16_1 test_16_2 }


# components/rshift
sub test_17_1 { 10 dup rshift dup plus push 17001 pass } # test rshift
sub test_17_2 { -10 dup rshift dup plus push 17002 pass }
sub test_17_3 { test_17_1 test_17_2 }


# components/stringpush
sub test_18_1 { depth$ push$ "ABCD 12345" depth$ accumulate 10 push 18001 pass }


# components/times
sub test_19_1 { inc }
sub test_19_2 { 0 0 inc lshift lshift lshift times test_19_1 dec dec dec 5 push 19002 pass }
sub test_19_3 { test_19_2 }


# components/whileuntilagain
sub test_20_1 { 50 6 inc begin lshift dec dup2 less if exit endif dec again drop 0 }
sub test_20_2 { test_20_1 plus 133 push 20002 pass }
sub test_20_3 { 200 3 lshift begin dec lshift dup2 more while dec lshift repeat plus 714 push 20003 pass }
sub test_20_4 { 100 2 inc begin lshift inc dup2 less until plus 227 push 20004 pass }
sub test_20_5 { test_20_2 test_20_3 test_20_4 }


sub selftest {
"selftest started" message
   12345678      # stack 'marker'
    test_1_3 test_2_9 test_3_8 test_4_5 test_5_3 test_6_2 test_7_3 test_8_9
    test_9_3 test_10_4 test_11_9 test_12_5 test_13_8 test_14_5 test_15_1 test_16_3
    test_17_3 test_18_1 test_19_3 test_20_5
   12345678 99999 pass # all tests balanced?
   "selftest finished" message
}
