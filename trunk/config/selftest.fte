#/home/jeremy/Projects/efte/selftest/production
# -----------------------------------------------------------------------
# eFTE self test script
# This file has been automatically generated by the eFTE packaging tools.
# Manual changes to this file will very likely be lost, and may have an
# adverse effect on eFTE self testing capabilities.
# Copyright (c) 2008 eFTE Group
# -----------------------------------------------------------------------

sub .33 {                    # ( n -- ) print as nnn:nnn
   <hash                    
   bl hold
   3:hash
   ':' hold
   3:hash
   hash> type$
}

sub accumulate { 10 * + }
sub emptyall  {
   depth$ times drop$
   depth times drop
}

sub emptybuffer {
   movefilestart blockbegin
   movefileend    blockend
   ?blockkill                # fails if buffer empty. force to continue
}

sub testfilename { var$ new }
sub timestarted  { var new }

sub beforealltests {
   timestarted off
   emptybuffer
   256 bl repeat$ testfilename store$           # initialize file name variable to 256 chars
   "selftest started" type$ cr
   microsecs timestarted !
   }


sub afteralltests {
   microsecs
   "selftest finished" type$ cr
   timestarted @ -  "Time elapsed: " type$ . "microsecs" type$ cr
   }


sub pass   {    # ( got wants testnum -- )
   >r
      dup2 equals
      depth depth$ accumulate 03 equals
      >r
      r@ and if "PASS" else "FAIL" endif type$
      r> minrot                                 # stacks: 0=err
   r> " test "    type$       .33
   "wanted" type$  9 .r
   ", got"  type$  9 .r

   3 spaces   
   if "stacks ok, " else "STACKS OFF," endif type$
   3 spaces

   testfilename fetch$ type$ cr
   emptyall
   filesave
}

# -------------------------------------------------------------------------------------------------

# 1 - alwayspass.fte
sub test_1_1 { 222 222  1001 pass } # just two passing tests to test test and test that pass will pass
sub test_1_2 { 222 dup  1002 pass }
sub test_1_3 { test_1_1 test_1_2 }
sub test_1 { "alwayspass.fte" testfilename store$ test_1_3 }

# -------------------------------------------------------------------------------------------------

# 2 - constants.fte
 # tests:
 # minus, plus,
 # primitives defined constants
 
sub test_2_1 { 20 15 - 5  2001 pass }
sub test_2_2 { 20 15 + 35  2002 pass }
sub test_2_3 { 0 false or 1 + true + 0  2003 pass }
sub test_2_4 { 0 false + 1 - true * 1  2004 pass }
sub test_2_5 { test_2_1 test_2_2 test_2_3 test_2_4 }
sub test_2 { "constants.fte" testfilename store$ test_2_5 }

# -------------------------------------------------------------------------------------------------

# 3 - bits/bits.fte
sub test_3_1 { 2 invert -3  3001 pass } # test invert
sub test_3_2 { -5 invert 4  3002 pass }
 
sub test_3_3 { 0 not true  3003 pass } # test not
sub test_3_4 { 1234 not false  3004 pass }
sub test_3_5 { -321 not false  3005 pass }
sub test_3_6 { true not false  3006 pass }
sub test_3_7 { false not true  3007 pass }
 
sub test_3_8 { test_3_1 test_3_2 test_3_3 test_3_4 test_3_5 test_3_6 test_3_7 }
sub test_3 { "bits/bits.fte" testfilename store$ test_3_8 }

# -------------------------------------------------------------------------------------------------

# 4 - bits/lshift.fte
sub test_4_1 { 4 lshift 8  4001 pass } # test lshift
sub test_4_2 { -4 lshift -8  4002 pass }
sub test_4_3 { test_4_1 test_4_2 }
sub test_4 { "bits/lshift.fte" testfilename store$ test_4_3 }

# -------------------------------------------------------------------------------------------------

# 5 - bits/rshift.fte
sub test_5_1 { 10 dup rshift dup +  5001 pass } # test rshift
sub test_5_2 { -10 dup rshift dup +  5002 pass }
sub test_5_3 { test_5_1 test_5_2 }
sub test_5 { "bits/rshift.fte" testfilename store$ test_5_3 }

# -------------------------------------------------------------------------------------------------

# 6 - zzz_final.fte
sub test_6_1 { depth depth$ or 0  6001 pass }
sub test_6 { "zzz_final.fte" testfilename store$ test_6_1 }

# -------------------------------------------------------------------------------------------------

# 7 - stack/qdup.fte
sub test_7_1 { 2 0 qdup swap qdup 10 * + 10 * + 220  7001 pass } # tests qdup
sub test_7 { "stack/qdup.fte" testfilename store$ test_7_1 }

# -------------------------------------------------------------------------------------------------

# 8 - stack/niptuckpluck.fte
sub test_8_1 { 4 6 8 drop accumulate 64  8001 pass } # test drop
sub test_8_2 { 3 6 swap accumulate 36  8002 pass } # test swap
sub test_8_3 { 2 5 over 2:accumulate 252  8003 pass } # test over
sub test_8_4 { 1 2 3 nip accumulate 31  8004 pass } # test nip
sub test_8_5 { 4 5 6 minrot 2:accumulate 546  8005 pass } # test minrot
sub test_8_6 { 7 8 9 tuck 3:accumulate 9897  8006 pass } # test tuck
sub test_8_7 { 2 4 6 pluck 3:accumulate 2642  8007 pass } # test pluck
sub test_8_8 { test_8_1 test_8_2 test_8_3 test_8_4 test_8_5 test_8_6 test_8_7 }
sub test_8 { "stack/niptuckpluck.fte" testfilename store$ test_8_8 }

# -------------------------------------------------------------------------------------------------

# 9 - stack/rfromtor.fte
sub test_9_1 { 5 7 9 >r swap r> 2:accumulate 957  9001 pass }
sub test_9_2 { 2 3 >r 5 r@ swap r> 3:accumulate 3532  9002 pass }
sub test_9_3 { test_9_1 test_9_2 }
sub test_9 { "stack/rfromtor.fte" testfilename store$ test_9_3 }

# -------------------------------------------------------------------------------------------------

# 10 - memory.fte
sub test_10_1 { here 5 allot here - -5  10001 pass }
sub test_10_2 { here dup dup 100 + ! here swap  10002 pass }
sub test_10_3 { here dup 6 1 do i over ! inc loop drop
 6 1 do 1 allot loop
 0 6 1 do >r count r> + loop nip
 15  10003 pass }
 
sub test_10_4 { test_10_1 test_10_2 test_10_3 }
sub test_10 { "memory.fte" testfilename store$ test_10_4 }

# -------------------------------------------------------------------------------------------------

# 11 - arithmetics/between.fte
sub test_11_1 { 10 8 12 between true  11001 pass }
sub test_11_2 { 8 8 12 between true  11002 pass }
sub test_11_3 { 12 8 12 between true  11003 pass }
 
sub test_11_4 { 5 8 12 between false  11004 pass }
sub test_11_5 { 15 8 12 between false  11005 pass }
 
sub test_11_6 { -5 -10 0 between true  11006 pass }
sub test_11_7 { -15 -10 0 between false  11007 pass }
sub test_11_8 { 10 -20 -10 between false  11008 pass }
 
sub test_11_9 { test_11_1 test_11_2 test_11_3 test_11_4 test_11_5 test_11_6 test_11_7 test_11_8 }
sub test_11 { "arithmetics/between.fte" testfilename store$ test_11_9 }

# -------------------------------------------------------------------------------------------------

# 12 - arithmetics/plus.fte
sub test_12_1 { 3 5 + 8  12001 pass }
sub test_12_2 { -2 9 + 7  12002 pass }
sub test_12_3 { 6 -8 + -2  12003 pass }
sub test_12_4 { -11 -7 + -18  12004 pass }
sub test_12_5 { test_12_1 test_12_2 test_12_3 test_12_4 }
sub test_12 { "arithmetics/plus.fte" testfilename store$ test_12_5 }

# -------------------------------------------------------------------------------------------------

# 13 - arithmetics/mod.fte
sub test_13_1 { 20 5 mod 0  13001 pass }
sub test_13_2 { 15 4 mod 3  13002 pass }
sub test_13_3 { -18 4 mod -2  13003 pass }
sub test_13_4 { -24 -7 mod -3  13004 pass }
sub test_13_5 { test_13_1 test_13_2 test_13_3 test_13_4 }
sub test_13 { "arithmetics/mod.fte" testfilename store$ test_13_5 }

# -------------------------------------------------------------------------------------------------

# 14 - arithmetics/incdecnegate.fte
sub test_14_1 { 30 inc inc inc 33  14001 pass }
sub test_14_2 { -2 inc inc inc inc inc 3  14002 pass }
sub test_14_3 { 20 dec dec 18  14003 pass }
sub test_14_4 { 1 dec dec dec dec -3  14004 pass }
sub test_14_5 { 12 negate -12  14005 pass }
sub test_14_6 { -15 negate 15  14006 pass }
sub test_14_7 { -8 abs 8  14007 pass }
sub test_14_8 { 5 abs 5  14008 pass }
sub test_14_9 { test_14_1 test_14_2 test_14_3 test_14_4 test_14_5 test_14_6 test_14_7 test_14_8 }
sub test_14 { "arithmetics/incdecnegate.fte" testfilename store$ test_14_9 }

# -------------------------------------------------------------------------------------------------

# 15 - arithmetics/minmax.fte
sub test_15_1 { 2 5 min 2  15001 pass }
sub test_15_2 { 2 5 max 5  15002 pass }
sub test_15_3 { -3 -7 min -7  15003 pass }
sub test_15_4 { -3 -7 max -3  15004 pass }
 
sub test_15_5 { -2 5 min -2  15005 pass }
sub test_15_6 { -2 5 max 5  15006 pass }
sub test_15_7 { 3 -7 min -7  15007 pass }
sub test_15_8 { 3 -7 max 3  15008 pass }
 
sub test_15_9 { test_15_1 test_15_2 test_15_3 test_15_4 test_15_5 test_15_6 test_15_7 test_15_8 }
sub test_15 { "arithmetics/minmax.fte" testfilename store$ test_15_9 }

# -------------------------------------------------------------------------------------------------

# 16 - flowcontrol/whileuntilagain.fte
sub test_16_1 { 50 6 inc begin lshift dec dup2 < if exit endif dec again drop 0 }
sub test_16_2 { test_16_1 + 133  16002 pass }
sub test_16_3 { 200 3 lshift begin dec lshift dup2 > while dec lshift repeat + 714  16003 pass }
sub test_16_4 { 100 2 inc begin lshift inc dup2 < until + 227  16004 pass }
sub test_16_5 { test_16_2 test_16_3 test_16_4 }
sub test_16 { "flowcontrol/whileuntilagain.fte" testfilename store$ test_16_5 }

# -------------------------------------------------------------------------------------------------

# 17 - flowcontrol/iftelsethen.fte
sub test_17_1 { 5 inc true if lshift inc else drop 0 endif lshift 26  17001 pass }
sub test_17_2 { 3 inc false if drop 0 else inc lshift endif inc 11  17002 pass }
sub test_17_3 { test_17_1 test_17_2 }
sub test_17 { "flowcontrol/iftelsethen.fte" testfilename store$ test_17_3 }

# -------------------------------------------------------------------------------------------------

# 18 - flowcontrol/exit.fte
sub test_18_1 { 333 exit lshift } # tests exit
sub test_18_2 { test_18_1 inc 334  18002 pass }
sub test_18 { "flowcontrol/exit.fte" testfilename store$ test_18_2 }

# -------------------------------------------------------------------------------------------------

# 19 - flowcontrol/times.fte
sub test_19_1 { inc }
sub test_19_2 { 0 0 inc lshift lshift lshift times test_19_1 dec dec dec 5  19002 pass }
sub test_19_3 { 5 0 times test_19_1 dec 4  19003 pass }
sub test_19_4 { test_19_2 test_19_3 }
sub test_19 { "flowcontrol/times.fte" testfilename store$ test_19_4 }

# -------------------------------------------------------------------------------------------------

# 20 - flowcontrol/doloop.fte
sub test_20_1 { 0 101 0 do i + loop 5050  20001 pass }
sub test_20_2 { 0 200 100 do i + i 150 equals if leave endif inc loop lshift 12850  20002 pass }
sub test_20_3 { 10 20 20 do inc inc inc loop dec 9  20003 pass }
sub test_20_4 { 20 0 0 do dec dec dec loop inc 21  20004 pass }
 
sub test_20_5 { 0 20 10 do i + 3 +loop 58  20005 pass }
sub test_20_6 { 0 -20 -10 do i + 3 -loop -58  20006 pass }
sub test_20_7 { 0 -20 -10 do i + -3 +loop -58  20007 pass }
 
sub test_20_8 { 0 20 10 do i + 2 +loop 70  20008 pass }
sub test_20_9 { 0 -20 -10 do i + 2 -loop -70  20009 pass }
sub test_20_10 { 0 -20 -10 do i + -2 +loop -90  20010 pass }
 
sub test_20_11 { 1 5 1 do 4 1 do i * j + loop loop 4396  20011 pass }
 
sub test_20_12 { test_20_1 test_20_2 test_20_3 test_20_4 test_20_5
 test_20_6 test_20_7 test_20_8 test_20_9 test_20_10
 test_20_11 }
sub test_20 { "flowcontrol/doloop.fte" testfilename store$ test_20_12 }

# -------------------------------------------------------------------------------------------------

sub selftest {
   beforealltests
      test_1    test_2    test_3    test_4    test_5    test_6    test_7    test_8
      test_9    test_10   test_11   test_12   test_13   test_14   test_15   test_16
      test_17   test_18   test_19   test_20   
   afteralltests
}
