# primitives.fte
#
# Copyright (c) 2008, eFTE SF Group (see AUTHORS file)
#
# You may distribute under the terms of either the GNU General Public
# License or the Artistic License, as specified in the README file.
#
# some tools and enhancements for macros.
# this are currently used for testing and toying
# with macros, as result many of the current macros
# assume these to be present, as factored out functionality.
#

# -- constants --
sub zero      { push 0 }
sub false     { push 0 }
sub one       { push 1 }
sub true      { push -1 }                       # "true" represented as all bits sets

# -- stack --
sub qdup      { dup if dup endif }              # duplicate top of stack if <> 0
sub nip       { swap drop }                     # drop second of stack
sub tuck      { swap over }                     # copy top of stack below second of stack
sub pluck     { tor over rfrom swap }
sub minRot    { 2:rot }                         # rotate top item below second item
sub dup2      { 2:over }                        # duplicate top two items
sub drop2     { 2:drop }                        # drop top two items
sub swap2     { rot tor rot rfrom }             # swap top two pairs of items

# -- bool, bits, comparison  --
sub invert    { true xor }                      # complement all bits
sub not       { zero equals }                   # logical inversion: 0->true,  x->0
sub lshift    { push 1 shift }                  # bit shift left once
sub rshift    { push -1 shift }                 # bit shift right once
sub success   { flag }                          # push command return code
sub failure   { flag not }                      # push inverted command return code
sub more      { swap less }                     # true if nos > tos
sub between   { rot tuck less minrot more or not }
sub capital   { push 'A' 'Z' between }
sub lowercase { push 'a' 'z' between }
sub capitalize { dup lowercase if push 32 minus endif }
sub negative  { zero less }                     # < zero?

# -- arithmetic --
sub inc       { one plus }                      # increment top of stack by one
sub dec       { one minus }                     # decrement top of stack by one
sub negate    { invert inc }                    # change sign
sub abs       { dup negative if negate endif }  # remove sign
sub min       { dup2 more if swap endif drop }
sub max       { dup2 less if swap endif drop }
sub mod       { dup2 div mul minus }            # modulo (remainder) function
sub gcd       { begin tuck mod qdup not until } # greatest common denominator
sub sqrt      { zero tuck do inc dup lshift inc plusloop }
sub range     { over plus swap }                # start n -> limit start conversion for DO LOOP

# -- i/o --
sub key       { getchar; }                      # wait for key, place its ascii on stack
sub read      { push $Char }                    # read char under cursor
sub emit      { insertstring $toschar }

sub bl        { push 32 }
sub space     { bl emit }                       # print a space character
sub spaces    { times space }                   # don't have loops yet
sub cr        { linenew }                       # carriage return

sub count     { inc dup dec fetch }
sub type1     { count emit }
sub type      { times type1 drop }              # string output

# -- cursor --
sub cursorhome { movelinestart }
sub cursorend  { movelineend }



# need:
#  test block marked?
#  0 split$ no fail

# =============================================================================
# String Stack Helpers
# =============================================================================

sub nip$      { swap$ drop$ }
sub tuck$     { swap$ over$ }
sub minrot$   { 2:rot$  }
sub dup2$     { 2:over$ }
sub drop2$    { 2:drop$ }
sub equals$   { compare$ not }
sub type$     { insertstring $tos$ }


sub left$     {                                 # ( n -- )
   dup negative if                              # negative n: strip first n chars
      negate len$ over minus
   else                                         # positive n: keep first n chars
      zero swap
   endif
   mid$ }

sub right$    {                                 # ( n -- )
  dup negative if                               # negative n: strip last n chars
     zero len$ rot plus
  else                                          # positive n: keep last n chars
     dup negate swap
  endif
  mid$ }


sub search$   {                                 # ( n1 -- n2 )
  true swap                                     # search though n1 string stack items,
  zero do                                       # matching against top string. returns
    i inc pick$                                 # item number of matching string as n2,
    over$ equals$                               # or -1
    if drop i leave endif
  loop
  drop$
}


sub asc   { dup$ one mid$ push $tos$ }          # ( n -- c ) get ascii of nth char in top string
sub char$ { push$ $toschar }                    # ( c -- )   asc on stack becomes char string on stringstack

sub slice  { one split$ push $tos$ }            # ( -- asc ) cut first char off string and return as ascii
sub splice { char$ swap$ merge$ }               # ( asc -- ) prepend char to string

sub embed$ {                                    # ( asc n -- ) store char at pos n of topmost string, overwriting
   dup dup$ left$                               # cut and keep chars left of write pos
   invert swap$ left$                           # cut and keep chars right of write pos (tricky)
   splice merge$                                # recombine, with char between
}

sub capitalize$ {                               # ( -- )  capitalize all chars of top string
   len$ zero do                                 # loop though all chars:
      i asc dup lowercase if
         capitalize
         dup i embed$                           #   replace char in string
      endif drop
   loop }


sub minleading$ {                               # ( -- )
   len$                                         # assume removing whole string
   dup zero do                                  # loop through string,
      i asc bl equals not                       # looking for non-space
      if drop i leave endif                     # found, return index to space
   loop
   negate left$                                 # remove leading spaces
}


sub mintrailing$ {                              # ( -- )
   len$
   dup zero do
      dec dup asc
      bl equals not if
         inc leave
      endif
   loop
   left$ }

sub trim$ { minleading$ mintrailing$ }          # ( -- )

sub store$    {                                 # ( a -- ) transfers string on string stack to a
   len$ swap                                    #  may want to add transfer limit according string var size.
   dup2 store inc
   swap range do
      slice i store
   loop drop$ }


sub fetch$    {                                 # ( a -- ) transfers the string at a to string stack.
   push$ ''
   count zero do
      count char$ merge$
   loop drop }

sub stringvar { here len$ inc allot }           # string var description. rename to var$ ?
                                                # may want to keep allocated size for boundary check


# =============================================================================
#    memory
# =============================================================================

sub free      { memend here minus }
sub cell      { one }
sub plusstore { dup tor fetch plus rfrom store } # ( x a -- )  adds x to contents of address a
sub comma     { here cell allot store }          # ( x -- )    allocate 1 location, initialized to x
sub var       { here cell allot }                # for the new construct:       sub foo { var new }
                                                 # can then use vars like:      sub bar { var new }
                                                 #                foo fetch   bar store
sub exchange  { dup fetch tor store rfrom }      # ( x1 a -- x2 )
sub link      { here swap exchange comma }       # ( a -- )






# --- the number conversion words below respect base, and convert accordingly ---
# we need to init base somewhere - vars are initialized to zero, which is not a good number base.
# using number output without setting base first will result in division by zero
# time for checking out the OnStart: event, which should be ideally suited for one-time init.
sub base      { var new }                        # number base for pic'd num conversion
sub decimal   { push 10 base store }
sub hex       { push 16 base store }
sub octal     { push  8 base store }
sub binary    { push  2 base store }


# --- pictured number conversion ---
sub digit     { push '0' plus dup push '9' more if push 7 plus endif }  # ( u -- asc )
sub slashmod  { dup2 div dup tor mul minus abs rfrom }                  # ( n1 n2 -- r q )
sub lesshash  { push$ '' } 	   		                      	      		# ( n -- n ) start pictured num conversion
sub hold      { splice }                                                # ( n asc -- n )
sub hash      { base fetch slashmod tor digit splice rfrom }            # ( n1 -- n2 )
sub hashes    { begin hash dup not until }                              # ( n1 -- n2 )
sub hashmoretype { drop type$ }                                         # ( n -- )  end pic num conv and print
sub hashmore  { drop }                                                  # ( n -- )  end pic num conv - should convert
                                                                        # string stack to ( a n ) to comply with standard.
                                                                        # this version leaves converted number on top of string stack
sub sign      { negative if push '-' splice endif }                     # ( n -- }
sub brdotbr   { dup tor lesshash hashes rfrom sign hashmore }           # ( n -- )

sub spacepad1 { bl splice }
sub spacepad  { len$ minus
                dup negative not if
                   dup times spacepad1
                endif drop }


# --- "app" level number output words ---
sub dot       { dup tor
                lesshash
                   bl splice
                   hashes
                   rfrom sign
                hashmoretype }

sub dotr      { tor dup tor                                             # space padded signed number: ( n1 u -- )
                lesshash
                   hashes
                   rfrom sign
                   rfrom spacepad
                hashmoretype }

sub dot0r     { lesshash                                                # zero padded signed number:  ( n1 u -- )
      		    bl splice
                times hash
                hashmoretype }


# --- initialisation ---
sub OnBoot { decimal }

