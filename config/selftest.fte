#/home/l/efte/selftest/production
# -----------------------------------------------------------------------
# eFTE self test script
# This file has been automatically generated by the eFTE packaging tools.
# Manual changes to this file will very likely be lost, and may have an
# adverse effect on eFTE self testing capabilities.
# Copyright (c) 2008 eFTE Group
# -----------------------------------------------------------------------

sub dot33 {                    # ( n -- ) print as nnn:nnn
   lesshash                    
   bl hold
   3:hash
   58 hold
   3:hash
   hashmoretype
}

sub accumulate { 10 * + }
sub emptyall  {
   depth$ times drop$
   depth times drop
}

sub emptybuffer {
   movefilestart blockbegin
   movefileend    blockend
   blockkill                # fails if buffer empty. force to continue
}

sub testfilename { var$ new }


sub beforealltests {
   emptybuffer
   "selftest started" type$ cr
   }


sub afteralltests {
   "selftest finished" type$ cr
   }


sub pass   {    # ( got wants testnum -- )  ( filename$ -- )
   tor
      dup2 equals
      depth depth$ accumulate 13 equals and
      if "PASS" else "FAIL" endif type$
   rfrom 
   " test " type$ dot33
   "wanted" type$ 9 dotr
   ", got"  type$ 9 dotr
   3 spaces type$ cr
   emptyall
   filesave
}


# 1 - alwayspass.fte
sub test_1_1 { 222 222  1001 "alwayspass.fte" pass } # just two passing tests to test test and test that pass will pass
sub test_1_2 { 222 dup  1002 "alwayspass.fte" pass }
sub test_1_3 { test_1_1 test_1_2 }


# 2 - arithmetics/between.fte
sub test_2_1 { 10 8 12 between true  2001 "arithmetics/between.fte" pass }
sub test_2_2 { 8 8 12 between true  2002 "arithmetics/between.fte" pass }
sub test_2_3 { 12 8 12 between true  2003 "arithmetics/between.fte" pass }
 
sub test_2_4 { 5 8 12 between false  2004 "arithmetics/between.fte" pass }
sub test_2_5 { 15 8 12 between false  2005 "arithmetics/between.fte" pass }
 
sub test_2_6 { -5 -10 0 between true  2006 "arithmetics/between.fte" pass }
sub test_2_7 { -15 -10 0 between false  2007 "arithmetics/between.fte" pass }
sub test_2_8 { 10 -20 -10 between false  2008 "arithmetics/between.fte" pass }
 
sub test_2_9 { test_2_1 test_2_2 test_2_3 test_2_4 test_2_5 test_2_6 test_2_7 test_2_8 }


# 3 - arithmetics/incdecnegate.fte
sub test_3_1 { 30 inc inc inc 33  3001 "arithmetics/incdecnegate.fte" pass }
sub test_3_2 { -2 inc inc inc inc inc 3  3002 "arithmetics/incdecnegate.fte" pass }
sub test_3_3 { 20 dec dec 18  3003 "arithmetics/incdecnegate.fte" pass }
sub test_3_4 { 1 dec dec dec dec -3  3004 "arithmetics/incdecnegate.fte" pass }
sub test_3_5 { 12 negate -12  3005 "arithmetics/incdecnegate.fte" pass }
sub test_3_6 { -15 negate 15  3006 "arithmetics/incdecnegate.fte" pass }
sub test_3_7 { -8 abs 8  3007 "arithmetics/incdecnegate.fte" pass }
sub test_3_8 { 5 abs 5  3008 "arithmetics/incdecnegate.fte" pass }
sub test_3_9 { test_3_1 test_3_2 test_3_3 test_3_4 test_3_5 test_3_6 test_3_7 test_3_8 }
 


# 4 - arithmetics/minmax.fte
sub test_4_1 { 2 5 min 2  4001 "arithmetics/minmax.fte" pass }
sub test_4_2 { 2 5 max 5  4002 "arithmetics/minmax.fte" pass }
sub test_4_3 { -3 -7 min -7  4003 "arithmetics/minmax.fte" pass }
sub test_4_4 { -3 -7 max -3  4004 "arithmetics/minmax.fte" pass }
 
sub test_4_5 { -2 5 min -2  4005 "arithmetics/minmax.fte" pass }
sub test_4_6 { -2 5 max 5  4006 "arithmetics/minmax.fte" pass }
sub test_4_7 { 3 -7 min -7  4007 "arithmetics/minmax.fte" pass }
sub test_4_8 { 3 -7 max 3  4008 "arithmetics/minmax.fte" pass }
 
sub test_4_9 { test_4_1 test_4_2 test_4_3 test_4_4 test_4_5 test_4_6 test_4_7 test_4_8 }


# 5 - arithmetics/mod.fte
sub test_5_1 { 20 5 mod 0  5001 "arithmetics/mod.fte" pass }
sub test_5_2 { 15 4 mod 3  5002 "arithmetics/mod.fte" pass }
sub test_5_3 { -18 4 mod -2  5003 "arithmetics/mod.fte" pass }
sub test_5_4 { -24 -7 mod -3  5004 "arithmetics/mod.fte" pass }
sub test_5_5 { test_5_1 test_5_2 test_5_3 test_5_4 }
 


# 6 - arithmetics/plus.fte
sub test_6_1 { 3 5 + 8  6001 "arithmetics/plus.fte" pass }
sub test_6_2 { -2 9 + 7  6002 "arithmetics/plus.fte" pass }
sub test_6_3 { 6 -8 + -2  6003 "arithmetics/plus.fte" pass }
sub test_6_4 { -11 -7 + -18  6004 "arithmetics/plus.fte" pass }
sub test_6_5 { test_6_1 test_6_2 test_6_3 test_6_4 }


# 7 - bits/bits.fte
sub test_7_1 { 2 invert -3  7001 "bits/bits.fte" pass } # test invert
sub test_7_2 { -5 invert 4  7002 "bits/bits.fte" pass }
 
sub test_7_3 { 0 not true  7003 "bits/bits.fte" pass } # test not
sub test_7_4 { 1234 not false  7004 "bits/bits.fte" pass }
sub test_7_5 { -321 not false  7005 "bits/bits.fte" pass }
sub test_7_6 { true not false  7006 "bits/bits.fte" pass }
sub test_7_7 { false not true  7007 "bits/bits.fte" pass }
 
sub test_7_8 { test_7_1 test_7_2 test_7_3 test_7_4 test_7_5 test_7_6 test_7_7 }


# 8 - bits/lshift.fte
sub test_8_1 { 4 lshift 8  8001 "bits/lshift.fte" pass } # test lshift
sub test_8_2 { -4 lshift -8  8002 "bits/lshift.fte" pass }
sub test_8_3 { test_8_1 test_8_2 }


# 9 - bits/rshift.fte
sub test_9_1 { 10 dup rshift dup +  9001 "bits/rshift.fte" pass } # test rshift
sub test_9_2 { -10 dup rshift dup +  9002 "bits/rshift.fte" pass }
sub test_9_3 { test_9_1 test_9_2 }


# 10 - constants.fte
 # tests:
 # minus, plus,
 # primitives defined constants
 
sub test_10_1 { 20 15 - 5  10001 "constants.fte" pass }
sub test_10_2 { 20 15 + 35  10002 "constants.fte" pass }
sub test_10_3 { 0 false or 1 + true + 0  10003 "constants.fte" pass }
sub test_10_4 { 0 false + 1 - true * 1  10004 "constants.fte" pass }
sub test_10_5 { test_10_1 test_10_2 test_10_3 test_10_4 }


# 11 - flowcontrol/doloop.fte
sub test_11_1 { 0 101 0 do i + loop 5050  11001 "flowcontrol/doloop.fte" pass }
sub test_11_2 { 0 200 100 do i + i 150 equals if leave endif inc loop lshift 12850  11002 "flowcontrol/doloop.fte" pass }
sub test_11_3 { 10 20 20 do inc inc inc loop dec 9  11003 "flowcontrol/doloop.fte" pass }
sub test_11_4 { 20 0 0 do dec dec dec loop inc 21  11004 "flowcontrol/doloop.fte" pass }
 
sub test_11_5 { 0 20 10 do i + 3 plusloop 58  11005 "flowcontrol/doloop.fte" pass }
sub test_11_6 { 0 -20 -10 do i + 3 minloop -58  11006 "flowcontrol/doloop.fte" pass }
sub test_11_7 { 0 -20 -10 do i + -3 plusloop -58  11007 "flowcontrol/doloop.fte" pass }
 
sub test_11_8 { 0 20 10 do i + 2 plusloop 70  11008 "flowcontrol/doloop.fte" pass }
sub test_11_9 { 0 -20 -10 do i + 2 minloop -70  11009 "flowcontrol/doloop.fte" pass }
sub test_11_10 { 0 -20 -10 do i + -2 plusloop -90  11010 "flowcontrol/doloop.fte" pass }
 
sub test_11_11 { 1 5 1 do 4 1 do i * j + loop loop 4396  11011 "flowcontrol/doloop.fte" pass }
 
sub test_11_12 { test_11_1 test_11_2 test_11_3 test_11_4 test_11_5
 test_11_6 test_11_7 test_11_8 test_11_9 test_11_10
 test_11_11 }
 


# 12 - flowcontrol/exit.fte
sub test_12_1 { 333 exit lshift } # tests exit
sub test_12_2 { test_12_1 inc 334  12002 "flowcontrol/exit.fte" pass }


# 13 - flowcontrol/iftelsethen.fte
sub test_13_1 { 5 inc true if lshift inc else drop 0 endif lshift 26  13001 "flowcontrol/iftelsethen.fte" pass }
sub test_13_2 { 3 inc false if drop 0 else inc lshift endif inc 11  13002 "flowcontrol/iftelsethen.fte" pass }
sub test_13_3 { test_13_1 test_13_2 }


# 14 - flowcontrol/times.fte
sub test_14_1 { inc }
sub test_14_2 { 0 0 inc lshift lshift lshift times test_14_1 dec dec dec 5  14002 "flowcontrol/times.fte" pass }
sub test_14_3 { 5 0 times test_14_1 dec 4  14003 "flowcontrol/times.fte" pass }
sub test_14_4 { test_14_2 test_14_3 }


# 15 - flowcontrol/whileuntilagain.fte
sub test_15_1 { 50 6 inc begin lshift dec dup2 less if exit endif dec again drop 0 }
sub test_15_2 { test_15_1 + 133  15002 "flowcontrol/whileuntilagain.fte" pass }
sub test_15_3 { 200 3 lshift begin dec lshift dup2 more while dec lshift repeat + 714  15003 "flowcontrol/whileuntilagain.fte" pass }
sub test_15_4 { 100 2 inc begin lshift inc dup2 less until + 227  15004 "flowcontrol/whileuntilagain.fte" pass }
sub test_15_5 { test_15_2 test_15_3 test_15_4 }


# 16 - memory.fte
sub test_16_1 { here 5 allot here - -5  16001 "memory.fte" pass }
sub test_16_2 { here dup dup 100 + store here swap  16002 "memory.fte" pass }
sub test_16_3 { here dup 6 1 do i over store inc loop drop
 6 1 do 1 allot loop
 0 6 1 do tor count rfrom + loop nip
 15  16003 "memory.fte" pass }
 
sub test_16_4 { test_16_1 test_16_2 test_16_3 }


# 17 - stack/niptuckpluck.fte
sub test_17_1 { 4 6 8 drop accumulate 64  17001 "stack/niptuckpluck.fte" pass } # test drop
sub test_17_2 { 3 6 swap accumulate 36  17002 "stack/niptuckpluck.fte" pass } # test swap
sub test_17_3 { 2 5 over 2:accumulate 252  17003 "stack/niptuckpluck.fte" pass } # test over
sub test_17_4 { 1 2 3 nip accumulate 31  17004 "stack/niptuckpluck.fte" pass } # test nip
sub test_17_5 { 4 5 6 minrot 2:accumulate 546  17005 "stack/niptuckpluck.fte" pass } # test minrot
sub test_17_6 { 7 8 9 tuck 3:accumulate 9897  17006 "stack/niptuckpluck.fte" pass } # test tuck
sub test_17_7 { 2 4 6 pluck 3:accumulate 2642  17007 "stack/niptuckpluck.fte" pass } # test pluck
sub test_17_8 { test_17_1 test_17_2 test_17_3 test_17_4 test_17_5 test_17_6 test_17_7 }


# 18 - stack/qdup.fte
sub test_18_1 { 2 0 qdup swap qdup 10 * + 10 * + 220  18001 "stack/qdup.fte" pass } # tests qdup


# 19 - stack/rfromtor.fte
sub test_19_1 { 5 7 9 tor swap rfrom 2:accumulate 957  19001 "stack/rfromtor.fte" pass }
sub test_19_2 { 2 3 tor 5 rfetch swap rfrom 3:accumulate 3532  19002 "stack/rfromtor.fte" pass }
sub test_19_3 { test_19_1 test_19_2 }


# 20 - strings/strings0.fte
 # swap$ dup$ drop$ rot$ over$
sub test_20_1 { "xyz" "987" swap$
 "xyz" equals$
 "987" equals$ and
 true  20001 "strings/strings0.fte" pass }
 
sub test_20_2 { "abc" "def" over$
 depth$ 3 equals
 "abc" equals$ and
 "def" equals$ and
 "abc" equals$ and
 true  20002 "strings/strings0.fte" pass }
 
sub test_20_3 { "ABC" dup$
 depth$ 2 equals
 equals$ and
 true  20003 "strings/strings0.fte" pass }
 
sub test_20_4 { "123" "789" "ABC"
 drop$ drop$
 "123" equals$
 true  20004 "strings/strings0.fte" pass }
 
sub test_20_5 { "123" "789" "ABC" "def"
 drop$ drop$ drop$
 "456" equals$
 false  20005 "strings/strings0.fte" pass }
 
sub test_20_6 { "abc" "def" "ghi" rot$
 "abc" equals$
 "ghi" equals$ and
 "def" equals$ and true  20006 "strings/strings0.fte" pass }
 
 
sub test_20_7 { test_20_1 test_20_2 test_20_3 test_20_4 test_20_5 test_20_6 }


# 21 - strings/strings1.fte
 
 # depth$ - string pushing - len$ - asc/char$ - split$
 
 # see whether depth$ reports correctly
sub test_21_1 { depth$ "ABCD 12345" depth$ drop$ accumulate 10  21001 "strings/strings1.fte" pass }
 
 # test push with different string lengths
sub test_21_2 { "ABCD" "12345" "x" "ab" "" depth$ dup times drop$ 5  21002 "strings/strings1.fte" pass }
 
 # len$ fails
sub test_21_3 { "" ?len$ 0  21003 "strings/strings1.fte" pass }
 
 # test len$
sub test_21_4 { "12345" len$ "abc" len$ "" ?len$ "a" len$ 3:accumulate 1035  21004 "strings/strings1.fte" pass }
 
 # test asc / char$
sub test_21_5 { "1" asc inc char$ 3 asc + char$ 2 asc + '7'  21005 "strings/strings1.fte" pass }
 
 # split$ tests
sub test_21_6 { "" asc 0  21006 "strings/strings1.fte" pass }
sub test_21_7 { "123456" 0 split$ len$ len$ accumulate 6  21007 "strings/strings1.fte" pass }
sub test_21_8 { "ABCDEFGH" -100 split$ len$ len$ accumulate 8  21008 "strings/strings1.fte" pass }
sub test_21_9 { "1234" 100 split$ len$ len$ accumulate 40  21009 "strings/strings1.fte" pass }
sub test_21_10 { "12345678 " 1 split$ asc drop$ '1'  21010 "strings/strings1.fte" pass }
sub test_21_11 { "45678" 2 split$ asc drop$ '4'  21011 "strings/strings1.fte" pass }
sub test_21_12 { "abcdef" 3 split$ asc drop$ 'a'  21012 "strings/strings1.fte" pass }
sub test_21_13 { "12345678" 0 split$ drop$ len$ '1'  21013 "strings/strings1.fte" pass }
sub test_21_14 { "12345678" 1 split$ drop$ asc '2'  21014 "strings/strings1.fte" pass }
sub test_21_15 { "45678" 2 split$ drop$ asc '6'  21015 "strings/strings1.fte" pass }
sub test_21_16 { "abcdef" 3 split$ drop$ asc 'd'  21016 "strings/strings1.fte" pass }
 
 
sub test_21_17 { test_21_1 test_21_2 test_21_3 test_21_4 test_21_5 test_21_6 test_21_7 test_21_8
 test_21_9 test_21_10 test_21_11 test_21_12 test_21_13 test_21_14 test_21_15 test_21_16}
 


# 22 - strings/strings2.fte
 # equal$ mid$
 
 
 # equal$ ( needed for next tests )
sub test_22_1 { "a" "a" equals$ true  22001 "strings/strings2.fte" pass }
sub test_22_2 { "B" 'A' inc char$ equals$ true  22002 "strings/strings2.fte" pass }
sub test_22_3 { "A" 'B' inc char$ equals$ false  22003 "strings/strings2.fte" pass }
 
 # mid$
 # interesting case. return "ABC" or "ABCDE"? trying both
sub test_22_4 { "ABCDEFG" -2 5 mid$ "ABC" equals$ true  22004 "strings/strings2.fte" pass }
sub test_22_5 { "ABCDEFG" -2 5 mid$ "ABCDE" equals$ true  22005 "strings/strings2.fte" pass }
 
sub test_22_6 { "abcdefgh" 0 2 mid$ "ab" equals$ true  22006 "strings/strings2.fte" pass }
sub test_22_7 { "123456" 1 3 mid$ "234" equals$ true  22007 "strings/strings2.fte" pass }
sub test_22_8 { "ABCDEF" 4 6 mid$ "EF" equals$ true  22008 "strings/strings2.fte" pass }
 
 #{ "abcde" 10 10 mid$ "" equals$ true  22008 "strings/strings2.fte" pass }
sub test_22_9 { false false not  22009 "strings/strings2.fte" pass } # just an attention drawer for the line above - terminates efte.
 
 # negative len not tested yet
 
 
sub test_22_10 { test_22_1 test_22_2 test_22_3 test_22_4 test_22_5 test_22_6 test_22_7 test_22_8 test_22_9 }
 
 
 


# 23 - strings/strings3.fte
 # split$ merge$
 
sub test_23_1 { "abcdefgh" 3 split$ "abc" equals$ "defgh" equals$ and true  23001 "strings/strings3.fte" pass }
sub test_23_2 { "1234" 0 split$ "" equals$ "1234" equals$ and true  23002 "strings/strings3.fte" pass }
sub test_23_3 { "ABCDE" 10 split$ "ABCDE" equals$ "" equals$ and true  23003 "strings/strings3.fte" pass }
sub test_23_4 { "" 0 split$ "" equals$ "" equals$ and true  23004 "strings/strings3.fte" pass }
sub test_23_5 { "" 5 split$ "" equals$ "" equals$ and true  23005 "strings/strings3.fte" pass }
sub test_23_6 { "" -2 split$ "" equals$ "" equals$ and true  23006 "strings/strings3.fte" pass }
 
sub test_23_7 { "123" "abcd" merge$ "abcd123" equals$ true  23007 "strings/strings3.fte" pass }
sub test_23_8 { "456" "" merge$ "456" equals$ true  23008 "strings/strings3.fte" pass }
sub test_23_9 { "" "efg" merge$ "efg" equals$ true  23009 "strings/strings3.fte" pass }
 
sub test_23_10 { test_23_1 test_23_2 test_23_3 test_23_4 test_23_5 test_23_6 test_23_7 test_23_8 }
 


# 24 - zzz_final.fte
sub test_24_1 { depth depth$ or 0  24001 "zzz_final.fte" pass }


sub selftest {
   beforealltests
    test_1_3 test_2_9 test_3_9 test_4_9 test_5_5 test_6_5 test_7_8 test_8_3
    test_9_3 test_10_5 test_11_12 test_12_2 test_13_3 test_14_4 test_15_5 test_16_4
    test_17_8 test_18_1 test_19_3 test_20_7 test_21_17 test_22_10 test_23_10 test_24_1
   afteralltests
}
