# macros.fte
#
# Copyright (c) 2008, eFTE SF Group (see AUTHORS file)
#
# You may distribute under the terms of either the GNU General Public
# License or the Artistic License, as specified in the README file.
#
# Additional macros provided by eFTE
#

# ( -- LineLen CurCol )
#
# Push the line range onto the stack for iterating via a Do ... Loop
#
sub linerange { linelen at? swap drop }

# ( -- endingRow startingRow )
#
# Push the block range onto the stack for iterating via a Do ... Loop
#
sub blockrange { moveblockend at? drop moveblockstart at? drop }

# ( ch -- num )
#
# Return True/False if the current character is equal to Tos
#
sub isscreenchar { curchar$ asc equals }

# ( -- )
#
# Eat all but one whitespace (backwards)
#
sub eatwhitespaceback {
  ?2:cursorleft  # leave at least 1 white space
  begin
    bl isscreenchar dup if
      killchar ?cursorleft success and
    endif
  not until
  ?2:cursorright # go back to original location (minus whitespace)
}

# ( ch -- pos )
#
# Goto character in the current line
#
# pos = -1 if not found
#
sub gotocharinline {
  -1
  movelinestart linelen 0 do
    over isscreenchar if drop at? swap drop leave endif
    cursorright
  loop
  nip
  dup negative if movelinestart endif
}

# ( -- )
#
# Align the specified character in each line of the selected block
#
# Example:
#    int a = 10;
#    int abc = 20;
#    int ad            = 30;
#
# Result:
#    int a   = 10;
#    int abc = 20;
#    int ad  = 30;
#
sub alignchar {
  getchar
  0
  blockrange do
    over gotocharinline drop eatwhitespaceback at? swap drop max
    cursordown
  loop

  moveblockstart blockrange blockunmark do
    over gotocharinline
    dup negative not if dup2 - spaces endif drop
    cursordown
  loop
  drop2
}

# ( -- )
#
# Join current line with line below eatting all whitespace in
# between except one
#

sub GreedyJoinLineNext {
    CursorDown MoveFirstNonWhite EatWhiteSpaceBack
    CursorUp MoveLineEnd KillChar
}

# ( -- )
#
# Join current line with line above eatting all whitespace
# in between except one
#

sub GreedyJoinLinePrev {
    MoveFirstNonWhiteSpace EatWhiteSpaceBack
    CursorUp MoveLineEnd EatWhiteSpaceBack KillChar
}
